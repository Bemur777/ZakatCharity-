import logging
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
INPUT_SAVINGS, INPUT_GOLD, INPUT_SILVER, INPUT_DEBT = range(4)
NISAB = 5000  # –£—Ç–æ—á–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–∏—Å–∞–± –¥–ª—è –≤–∞—à–µ–π –≤–∞–ª—é—Ç—ã

async def start(update: Update, context):
    await update.message.reply_text(
        "üïå –ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–∫—è—Ç.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –≤ –≤–∞–ª—é—Ç–µ:"
    )
    return INPUT_SAVINGS

async def input_savings(update: Update, context):
    try:
        savings = float(update.message.text.replace(",", "."))
        context.user_data['savings'] = savings
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–æ–ª–æ—Ç–∞ (–≤ –≤–∞–ª—é—Ç–µ), –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî 0:")
        return INPUT_GOLD
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return INPUT_SAVINGS

async def input_gold(update: Update, context):
    try:
        gold = float(update.message.text.replace(",", "."))
        context.user_data['gold'] = gold
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ä–µ–±—Ä–∞ (–≤ –≤–∞–ª—é—Ç–µ), –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî 0:")
        return INPUT_SILVER
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return INPUT_GOLD

async def input_silver(update: Update, context):
    try:
        silver = float(update.message.text.replace(",", "."))
        context.user_data['silver'] = silver
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ª–≥–æ–≤ (–≤ –≤–∞–ª—é—Ç–µ), –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî 0:")
        return INPUT_DEBT
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return INPUT_SILVER

async def input_debt(update: Update, context):
    try:
        debt = float(update.message.text.replace(",", "."))
        total = (
            context.user_data['savings'] 
            + context.user_data['gold'] 
            + context.user_data['silver']
        ) - debt

        if total < NISAB:
            await update.message.reply_text("üìâ –ó–∞–∫—è—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω: —Å—É–º–º–∞ –Ω–∏–∂–µ –Ω–∏—Å–∞–±–∞.")
        else:
            zakat = total * 0.025
            await update.message.reply_text(
                f"üìå –°—É–º–º–∞ –∑–∞–∫—è—Ç–∞: {zakat:.2f}.\n"
                "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—á–µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–ª–∞—Ç—ã –∑–∞–∫—è—Ç–∞!"
            )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return INPUT_DEBT

def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            INPUT_SAVINGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_savings)],
            INPUT_GOLD: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_gold)],
            INPUT_SILVER: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_silver)],
            INPUT_DEBT: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_debt)],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
