import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from dotenv import load_dotenv
import requests
from datetime import datetime, timedelta

# Load environment variables
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
EXCHANGE_API_KEY = os.getenv("EXCHANGE_RATE_API_KEY")

# Currency rates cache
exchange_rates = {"timestamp": None, "rates": {}}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command"""
    keyboard = [
        [InlineKeyboardButton("üíµ –í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="select_currency")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = (
        "üïå *–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º –≤ Zakat Charity Token Calculator!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫—è—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle inline button presses"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "select_currency":
        await select_currency(update, context)
    elif query.data == "about":
        await show_about(update, context)
    elif query.data.startswith("currency_"):
        selected_currency = query.data.split("_")[1]
        context.user_data["selected_currency"] = selected_currency
        await query.edit_message_text(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {selected_currency}\n"
            "üì• –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∞–∫—Ç–∏–≤–æ–≤:",
            parse_mode="Markdown"
        )

async def select_currency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show currency selection menu"""
    currencies = ["USD", "EUR", "GBP", "SAR", "TRY", "RUB", "KZT"]
    keyboard = [
        [InlineKeyboardButton(currency, callback_data=f"currency_{currency}")]
        for currency in currencies
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        reply_markup=reply_markup
    )

async def get_exchange_rates() -> dict:
    """Fetch and cache currency rates"""
    if not exchange_rates["timestamp"] or datetime.now() - exchange_rates["timestamp"] > timedelta(hours=1):
        response = requests.get(
            f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/latest/USD"
        )
        data = response.json()
        if data["result"] == "success":
            exchange_rates["rates"] = data["conversion_rates"]
            exchange_rates["timestamp"] = datetime.now()
    return exchange_rates["rates"]

async def calculate_zakat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Calculate zakat amount"""
    try:
        user_input = update.message.text.replace(",", ".")
        amount = float(user_input)
        selected_currency = context.user_data.get("selected_currency", "USD")
        
        rates = await get_exchange_rates()
        if selected_currency not in rates:
            raise ValueError("Unsupported currency")
        
        amount_usd = amount / rates[selected_currency]
        zakat = amount_usd * 0.025
        nisab = 87.48  # Gold nisab in grams
        
        zakat_local = zakat * rates[selected_currency]
        
        converted_zakat = {
            currency: round(zakat * rate, 2)
            for currency, rate in rates.items()
            if currency in ["USD", "EUR", "GBP", "SAR"]
        }
        
        response_text = (
            f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:*\n\n"
            f"‚Ä¢ –í–∞—à–∞ —Å—É–º–º–∞: {amount:.2f} {selected_currency}\n"
            f"‚Ä¢ –ó–∞–∫—è—Ç (2.5%): {zakat_local:.2f} {selected_currency}\n"
            f"‚Ä¢ –ù–∏—Å–∞–± (–º–∏–Ω. —Å—É–º–º–∞): {nisab} –≥ –∑–æ–ª–æ—Ç–∞\n\n"
            "üåê *–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç–∞—Ö:*\n"
        )
        
        response_text += "\n".join([f"  - {value:.2f} {currency}" for currency, value in converted_zakat.items()])
        response_text += "\n\nüí° –ó–∞–∫—è—Ç –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–∞—à –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç!"
        
        keyboard = [
            [InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫—è—Ç", url="https://your-charity-link.com")],
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="select_currency")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            response_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–º–µ—Ä: 15000 –∏–ª–∏ 12345.67"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def show_about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show project information"""
    about_text = (
        "üåü *Zakat Charity Token Project*\n\n"
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º blockchain-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è:\n"
        "‚úÖ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫—è—Ç–∞\n"
        "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∏—Å–∞–±–∞\n"
        "‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∞–º–∏\n\n"
        "üìà –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
